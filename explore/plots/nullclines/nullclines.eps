%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 194 575 597
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Tuesday, November 27, 2018 3:11:31 PM MST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
552 400 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
552.000 0 l
552.000 400.000 l
0 400.000 l
0 0 l
h
f
0 0 0 RG
1.50000 w
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
0 0 552 400 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 542 390 rc
1.00000 w
2 J
0 j
0 J
1 j
q
0.647059 0.647059 0.647059 RG
Q
2 J
0 j
0 J
1 j
q
0.647059 0.647059 0.647059 RG
Q
2 J
0 j
1.50000 w
0 J
1 j
q
q
0 0 1.00000 RG
44.0000 7.02000 491.988 344.980 rc
newpath
45.0000 351.000 m
45.0000 9.01998 l
S
cliprestore
newpath
0 0 m
0 390.000 l
542.000 390.000 l
542.000 0 l
h
W
Q
q
1.00000 0 0 RG
44.0000 7.02000 491.988 344.980 rc
newpath
45.0000 339.600 m
46.2854 324.627 l
47.5709 309.716 l
48.6893 296.840 l
49.8078 284.096 l
52.3235 256.110 l
54.8558 229.205 l
57.3761 204.028 l
59.7128 182.344 l
62.1322 161.739 l
64.6344 142.516 l
67.1286 125.511 l
69.6942 110.254 l
71.9540 98.6385 l
74.4979 87.5087 l
77.0523 78.2770 l
79.5140 71.0787 l
81.7494 65.8601 l
84.4075 61.1265 l
86.6593 58.2368 l
89.2786 56.0152 l
90.4379 55.3834 l
91.5972 54.9482 l
92.8691 54.6818 l
94.1410 54.6208 l
95.3522 54.7395 l
96.5633 55.0179 l
97.8271 55.4659 l
99.0908 56.0621 l
101.411 57.5034 l
103.915 59.4947 l
106.515 61.9635 l
108.779 64.3873 l
111.224 67.2403 l
113.750 70.3953 l
116.221 73.6432 l
118.611 76.9030 l
121.266 80.6230 l
123.651 84.0295 l
126.198 87.7095 l
128.506 91.0652 l
131.029 94.7406 l
133.402 98.1924 l
135.884 101.782 l
138.310 105.266 l
140.850 108.875 l
143.296 112.310 l
145.797 115.774 l
148.278 119.157 l
150.558 122.217 l
153.171 125.664 l
155.508 128.691 l
157.999 131.857 l
160.384 134.830 l
163.032 138.062 l
165.325 140.804 l
167.927 143.850 l
170.299 146.566 l
172.894 149.473 l
175.132 151.927 l
177.682 154.663 l
180.144 157.245 l
182.606 159.769 l
185.058 162.227 l
187.413 164.537 l
189.960 166.978 l
192.387 169.252 l
194.941 171.591 l
197.253 173.662 l
199.809 175.900 l
202.257 177.995 l
204.698 180.039 l
207.249 182.126 l
209.598 184.007 l
212.003 185.891 l
214.660 187.926 l
217.065 189.727 l
219.524 191.529 l
222.026 193.323 l
224.325 194.937 l
226.776 196.622 l
229.208 198.260 l
231.809 199.974 l
234.105 201.455 l
236.754 203.129 l
239.145 204.608 l
241.510 206.042 l
244.053 207.553 l
246.607 209.038 l
248.931 210.363 l
251.398 211.743 l
253.806 213.063 l
256.416 214.466 l
258.675 215.656 l
261.269 216.998 l
263.708 218.234 l
266.123 219.435 l
268.540 220.615 l
271.005 221.796 l
273.618 223.024 l
276.014 224.129 l
278.379 225.200 l
280.907 226.324 l
283.430 227.426 l
285.694 228.397 l
288.376 229.527 l
290.620 230.456 l
293.245 231.523 l
295.751 232.523 l
297.988 233.402 l
300.503 234.373 l
303.036 235.334 l
305.556 236.273 l
307.893 237.130 l
310.312 238.003 l
312.814 238.890 l
315.309 239.760 l
317.874 240.640 l
320.134 241.403 l
322.678 242.249 l
325.232 243.083 l
327.694 243.875 l
329.929 244.583 l
332.587 245.411 l
334.839 246.102 l
337.458 246.894 l
339.777 247.584 l
342.321 248.330 l
344.743 249.029 l
347.271 249.747 l
349.592 250.397 l
352.095 251.088 l
354.696 251.795 l
356.959 252.402 l
359.404 253.048 l
361.930 253.705 l
364.401 254.339 l
366.792 254.944 l
369.446 255.606 l
371.831 256.192 l
374.378 256.809 l
376.686 257.360 l
379.209 257.955 l
381.583 258.507 l
384.064 259.076 l
386.490 259.625 l
389.030 260.192 l
391.476 260.731 l
393.978 261.274 l
396.459 261.806 l
398.738 262.288 l
401.351 262.834 l
403.688 263.316 l
406.179 263.823 l
408.564 264.303 l
411.212 264.828 l
413.505 265.277 l
416.108 265.780 l
418.479 266.233 l
421.074 266.723 l
423.313 267.140 l
425.862 267.609 l
428.325 268.057 l
430.786 268.499 l
433.238 268.934 l
435.594 269.347 l
438.140 269.788 l
440.567 270.203 l
443.121 270.635 l
445.434 271.022 l
447.989 271.444 l
450.437 271.843 l
452.879 272.237 l
455.429 272.644 l
457.778 273.015 l
460.184 273.390 l
462.840 273.800 l
465.245 274.166 l
467.704 274.537 l
470.206 274.909 l
472.505 275.248 l
474.956 275.606 l
477.388 275.957 l
479.990 276.328 l
482.286 276.652 l
484.935 277.021 l
487.325 277.351 l
489.690 277.675 l
492.234 278.018 l
494.787 278.360 l
497.111 278.667 l
499.578 278.990 l
501.986 279.303 l
504.597 279.637 l
506.855 279.924 l
509.449 280.250 l
511.888 280.553 l
514.303 280.851 l
516.720 281.145 l
519.185 281.443 l
521.798 281.755 l
524.194 282.038 l
526.559 282.315 l
529.087 282.608 l
531.610 282.898 l
533.988 283.168 l
S
cliprestore
newpath
0 0 m
0 390.000 l
542.000 390.000 l
542.000 0 l
h
W
Q
q
0 0 1.00000 RG
44.0000 7.02000 491.988 344.980 rc
newpath
45.0000 66.0166 m
47.5709 67.5149 l
49.8078 68.8186 l
52.3235 70.2848 l
54.8558 71.7606 l
57.3761 73.2294 l
59.7128 74.5913 l
62.1322 76.0013 l
64.6344 77.4596 l
67.1286 78.9133 l
69.6942 80.4085 l
71.9540 81.7254 l
74.4979 83.2081 l
77.0523 84.6968 l
79.5140 86.1314 l
81.7494 87.4342 l
84.4075 88.9834 l
86.6593 90.2957 l
89.2786 91.8223 l
91.5972 93.1735 l
94.1410 94.6561 l
96.5633 96.0678 l
99.0908 97.5408 l
101.411 98.8935 l
103.915 100.352 l
106.515 101.868 l
108.779 103.187 l
111.224 104.612 l
113.750 106.084 l
116.221 107.524 l
118.611 108.917 l
121.266 110.464 l
123.651 111.854 l
126.198 113.339 l
128.506 114.684 l
131.029 116.154 l
133.402 117.538 l
135.884 118.984 l
138.310 120.398 l
140.850 121.878 l
143.296 123.303 l
145.797 124.761 l
148.278 126.207 l
150.558 127.536 l
153.171 129.058 l
155.508 130.420 l
157.999 131.873 l
160.384 133.262 l
163.032 134.806 l
165.325 136.142 l
167.927 137.659 l
170.299 139.041 l
172.894 140.553 l
175.132 141.858 l
177.682 143.344 l
180.144 144.779 l
182.606 146.213 l
185.058 147.642 l
187.413 149.015 l
189.960 150.499 l
192.387 151.914 l
194.941 153.402 l
197.253 154.750 l
199.809 156.239 l
202.257 157.666 l
204.698 159.089 l
207.249 160.575 l
209.598 161.944 l
212.003 163.346 l
214.660 164.894 l
217.065 166.296 l
219.524 167.729 l
222.026 169.187 l
224.325 170.527 l
226.776 171.955 l
229.208 173.373 l
231.809 174.889 l
234.105 176.227 l
236.754 177.771 l
239.145 179.164 l
241.510 180.543 l
244.053 182.025 l
246.607 183.513 l
248.931 184.868 l
251.398 186.306 l
253.806 187.709 l
256.416 189.230 l
258.675 190.547 l
261.269 192.058 l
263.708 193.480 l
266.123 194.887 l
268.540 196.296 l
271.005 197.732 l
273.618 199.255 l
276.014 200.652 l
278.379 202.030 l
280.907 203.503 l
283.430 204.974 l
285.694 206.293 l
288.376 207.856 l
290.620 209.164 l
293.245 210.694 l
295.751 212.154 l
297.988 213.458 l
300.503 214.924 l
303.036 216.400 l
305.556 217.869 l
307.893 219.231 l
310.312 220.641 l
312.814 222.099 l
315.309 223.553 l
317.874 225.048 l
320.134 226.365 l
322.678 227.847 l
325.232 229.336 l
327.694 230.771 l
329.929 232.074 l
332.587 233.623 l
334.839 234.935 l
337.458 236.462 l
339.777 237.813 l
342.321 239.295 l
344.743 240.707 l
347.271 242.180 l
349.592 243.533 l
352.095 244.992 l
354.696 246.507 l
356.959 247.827 l
359.404 249.252 l
361.930 250.724 l
364.401 252.164 l
366.792 253.557 l
369.446 255.104 l
371.831 256.494 l
374.378 257.978 l
376.686 259.323 l
379.209 260.794 l
381.583 262.177 l
384.064 263.624 l
386.490 265.037 l
389.030 266.518 l
391.476 267.943 l
393.978 269.401 l
396.459 270.847 l
398.738 272.176 l
401.351 273.698 l
403.688 275.060 l
406.179 276.512 l
408.564 277.902 l
411.212 279.445 l
413.505 280.782 l
416.108 282.298 l
418.479 283.681 l
421.074 285.193 l
423.313 286.498 l
425.862 287.983 l
428.325 289.419 l
430.786 290.853 l
433.238 292.282 l
435.594 293.655 l
438.140 295.139 l
440.567 296.553 l
443.121 298.042 l
445.434 299.390 l
447.989 300.879 l
450.437 302.306 l
452.879 303.729 l
455.429 305.215 l
457.778 306.584 l
460.184 307.986 l
462.840 309.534 l
465.245 310.936 l
467.704 312.369 l
470.206 313.827 l
472.505 315.167 l
474.956 316.595 l
477.388 318.013 l
479.990 319.529 l
482.286 320.867 l
484.935 322.411 l
487.325 323.804 l
489.690 325.183 l
492.234 326.665 l
494.787 328.153 l
497.111 329.507 l
499.578 330.945 l
501.986 332.349 l
504.597 333.870 l
506.855 335.186 l
509.449 336.698 l
511.888 338.119 l
514.303 339.527 l
516.720 340.935 l
519.185 342.372 l
521.798 343.895 l
524.194 345.291 l
526.559 346.670 l
529.087 348.143 l
531.610 349.613 l
533.988 351.000 l
S
cliprestore
newpath
0 0 m
0 390.000 l
542.000 390.000 l
542.000 0 l
h
W
Q
Q
q
1.00000 w
2 J
0 j
q
0 J
1 j
newpath
45.0000 351.000 m
533.988 351.000 l
S
Q
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
282 374 15 15 rc
newpath
292.125 380.406 m
291.015 384.187 l
290.849 384.750 290.765 385.104 290.765 385.250  c
290.765 385.333 290.778 385.393 290.804 385.429  c
290.830 385.466 290.869 385.484 290.921 385.484  c
290.994 385.484 291.072 385.450 291.156 385.382  c
291.239 385.315 291.458 385.052 291.812 384.593  c
292.000 384.750 l
291.666 385.270 291.328 385.656 290.984 385.906  c
290.744 386.072 290.515 386.156 290.296 386.156  c
290.140 386.156 290.015 386.109 289.921 386.015  c
289.828 385.921 289.781 385.802 289.781 385.656  c
289.781 385.510 289.807 385.317 289.859 385.078  c
289.932 384.765 290.125 384.083 290.437 383.031  c
289.718 384.218 289.117 385.036 288.632 385.484  c
288.148 385.932 287.697 386.156 287.281 386.156  c
287.083 386.156 286.916 386.088 286.781 385.953  c
286.645 385.817 286.578 385.645 286.578 385.437  c
286.578 385.114 286.671 384.625 286.859 383.968  c
287.421 382.015 l
287.557 381.546 287.625 381.255 287.625 381.140  c
287.625 381.088 287.606 381.044 287.570 381.007  c
287.533 380.971 287.494 380.953 287.453 380.953  c
287.359 380.953 287.268 380.984 287.179 381.046  c
287.091 381.109 286.890 381.343 286.578 381.750  c
286.375 381.609 l
286.697 381.119 287.036 380.760 287.390 380.531  c
287.661 380.343 287.911 380.250 288.140 380.250  c
288.296 380.250 288.424 380.299 288.523 380.398  c
288.622 380.497 288.671 380.625 288.671 380.781  c
288.671 381.010 288.588 381.421 288.421 382.015  c
287.828 384.062 l
287.661 384.625 287.578 384.979 287.578 385.125  c
287.578 385.208 287.604 385.273 287.656 385.320  c
287.708 385.367 287.776 385.390 287.859 385.390  c
288.005 385.390 288.190 385.320 288.414 385.179  c
288.638 385.039 288.937 384.729 289.312 384.250  c
289.687 383.770 289.997 383.320 290.242 382.898  c
290.487 382.476 290.744 381.807 291.015 380.890  c
291.156 380.406 l
292.125 380.406 l
h
f
Q
cliprestore
newpath
0 0 m
0 390.000 l
542.000 390.000 l
542.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 w
1.00000 w
2 J
0 j
newpath
45.0000 351.000 m
45.0000 355.760 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
47.5468 372.093 m
47.5468 370.958 47.7161 369.981 48.0546 369.164  c
48.3932 368.346 48.8489 367.739 49.4218 367.343  c
49.8593 367.020 50.3125 366.859 50.7812 366.859  c
51.5416 366.859 52.2239 367.250 52.8281 368.031  c
53.5885 368.989 53.9687 370.291 53.9687 371.937  c
53.9687 373.093 53.8020 374.072 53.4687 374.875  c
53.1354 375.677 52.7109 376.260 52.1953 376.625  c
51.6796 376.989 51.1822 377.171 50.7031 377.171  c
49.7552 377.171 48.9687 376.614 48.3437 375.500  c
47.8125 374.552 47.5468 373.416 47.5468 372.093  c
h
48.9843 372.281 m
48.9843 373.645 49.1510 374.760 49.4843 375.625  c
49.7656 376.354 50.1822 376.718 50.7343 376.718  c
50.9947 376.718 51.2656 376.599 51.5468 376.359  c
51.8281 376.119 52.0416 375.724 52.1875 375.171  c
52.4166 374.328 52.5312 373.140 52.5312 371.609  c
52.5312 370.484 52.4114 369.541 52.1718 368.781  c
52.0052 368.218 51.7812 367.822 51.5000 367.593  c
51.3020 367.427 51.0572 367.343 50.7656 367.343  c
50.4427 367.343 50.1510 367.494 49.8906 367.796  c
49.5364 368.203 49.2968 368.841 49.1718 369.710  c
49.0468 370.580 48.9843 371.437 48.9843 372.281  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
142.797 351.000 m
142.797 355.760 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
150.875 375.093 m
150.187 377.000 l
144.328 377.000 l
144.328 376.734 l
146.046 375.161 147.257 373.875 147.960 372.875  c
148.664 371.875 149.015 370.963 149.015 370.140  c
149.015 369.515 148.822 369.000 148.437 368.593  c
148.052 368.187 147.588 367.984 147.046 367.984  c
146.567 367.984 146.132 368.127 145.742 368.414  c
145.351 368.700 145.062 369.119 144.875 369.671  c
144.609 369.671 l
144.734 368.765 145.049 368.070 145.554 367.585  c
146.059 367.101 146.687 366.859 147.437 366.859  c
148.250 366.859 148.924 367.119 149.460 367.640  c
149.997 368.161 150.265 368.770 150.265 369.468  c
150.265 369.968 150.151 370.474 149.921 370.984  c
149.557 371.776 148.968 372.609 148.156 373.484  c
146.947 374.817 146.187 375.619 145.875 375.890  c
148.468 375.890 l
149.000 375.890 149.372 375.872 149.585 375.835  c
149.799 375.799 149.992 375.721 150.164 375.601  c
150.335 375.481 150.484 375.312 150.609 375.093  c
150.875 375.093 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
240.595 351.000 m
240.595 355.760 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
248.984 373.343 m
248.984 374.375 l
247.640 374.375 l
247.640 377.000 l
246.437 377.000 l
246.437 374.375 l
242.234 374.375 l
242.234 373.437 l
246.843 366.859 l
247.640 366.859 l
247.640 373.343 l
248.984 373.343 l
h
246.437 373.343 m
246.437 368.406 l
242.953 373.343 l
246.437 373.343 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
338.393 351.000 m
338.393 355.760 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
346.718 366.859 m
346.718 367.140 l
346.072 367.203 345.546 367.330 345.140 367.523  c
344.734 367.716 344.333 368.010 343.937 368.406  c
343.541 368.802 343.213 369.242 342.953 369.726  c
342.692 370.210 342.474 370.786 342.296 371.453  c
342.994 370.974 343.697 370.734 344.406 370.734  c
345.083 370.734 345.671 371.007 346.171 371.554  c
346.671 372.101 346.921 372.802 346.921 373.656  c
346.921 374.489 346.671 375.250 346.171 375.937  c
345.567 376.760 344.765 377.171 343.765 377.171  c
343.088 377.171 342.510 376.947 342.031 376.500  c
341.104 375.625 340.640 374.494 340.640 373.109  c
340.640 372.213 340.820 371.367 341.179 370.570  c
341.539 369.773 342.049 369.062 342.710 368.437  c
343.372 367.812 344.005 367.393 344.609 367.179  c
345.213 366.966 345.776 366.859 346.296 366.859  c
346.718 366.859 l
h
342.171 371.984 m
342.078 372.651 342.031 373.187 342.031 373.593  c
342.031 374.062 342.119 374.570 342.296 375.117  c
342.474 375.664 342.729 376.099 343.062 376.421  c
343.312 376.651 343.619 376.765 343.984 376.765  c
344.401 376.765 344.778 376.565 345.117 376.164  c
345.455 375.763 345.625 375.192 345.625 374.453  c
345.625 373.619 345.458 372.898 345.125 372.289  c
344.791 371.679 344.317 371.375 343.703 371.375  c
343.515 371.375 343.317 371.414 343.109 371.492  c
342.901 371.570 342.588 371.734 342.171 371.984  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
436.191 351.000 m
436.191 355.760 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
440.875 372.000 m
440.093 371.354 439.588 370.835 439.359 370.445  c
439.130 370.054 439.015 369.651 439.015 369.234  c
439.015 368.588 439.265 368.031 439.765 367.562  c
440.265 367.093 440.927 366.859 441.750 366.859  c
442.552 366.859 443.197 367.078 443.687 367.515  c
444.177 367.953 444.421 368.447 444.421 369.000  c
444.421 369.375 444.289 369.755 444.023 370.140  c
443.757 370.526 443.208 370.979 442.375 371.500  c
443.229 372.166 443.796 372.687 444.078 373.062  c
444.453 373.562 444.640 374.088 444.640 374.640  c
444.640 375.338 444.375 375.934 443.843 376.429  c
443.312 376.924 442.614 377.171 441.750 377.171  c
440.802 377.171 440.062 376.880 439.531 376.296  c
439.114 375.817 438.906 375.296 438.906 374.734  c
438.906 374.296 439.054 373.862 439.351 373.429  c
439.648 372.997 440.156 372.520 440.875 372.000  c
h
442.031 371.218 m
442.614 370.687 442.984 370.268 443.140 369.960  c
443.296 369.653 443.375 369.307 443.375 368.921  c
443.375 368.411 443.231 368.010 442.945 367.718  c
442.658 367.427 442.265 367.281 441.765 367.281  c
441.265 367.281 440.859 367.427 440.546 367.718  c
440.234 368.010 440.078 368.349 440.078 368.734  c
440.078 368.984 440.143 369.237 440.273 369.492  c
440.403 369.747 440.588 369.989 440.828 370.218  c
442.031 371.218 l
h
441.218 372.281 m
440.812 372.614 440.513 372.984 440.320 373.390  c
440.127 373.796 440.031 374.234 440.031 374.703  c
440.031 375.328 440.203 375.830 440.546 376.210  c
440.890 376.591 441.328 376.781 441.859 376.781  c
442.390 376.781 442.815 376.632 443.132 376.335  c
443.450 376.039 443.609 375.677 443.609 375.250  c
443.609 374.895 443.515 374.578 443.328 374.296  c
442.984 373.786 442.281 373.114 441.218 372.281  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
533.988 351.000 m
533.988 355.760 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
532.765 368.046 m
535.171 366.859 l
535.421 366.859 l
535.421 375.250 l
535.421 375.802 535.445 376.148 535.492 376.289  c
535.539 376.429 535.635 376.536 535.781 376.609  c
535.927 376.682 536.224 376.724 536.671 376.734  c
536.671 377.000 l
532.937 377.000 l
532.937 376.734 l
533.406 376.724 533.708 376.682 533.843 376.609  c
533.979 376.536 534.072 376.440 534.125 376.320  c
534.177 376.200 534.203 375.843 534.203 375.250  c
534.203 369.890 l
534.203 369.161 534.182 368.697 534.140 368.500  c
534.099 368.343 534.033 368.229 533.945 368.156  c
533.856 368.083 533.750 368.046 533.625 368.046  c
533.437 368.046 533.187 368.119 532.875 368.265  c
532.765 368.046 l
h
538.546 372.093 m
538.546 370.958 538.716 369.981 539.054 369.164  c
539.393 368.346 539.849 367.739 540.421 367.343  c
540.859 367.020 541.312 366.859 541.781 366.859  c
542.541 366.859 543.224 367.250 543.828 368.031  c
544.588 368.989 544.968 370.291 544.968 371.937  c
544.968 373.093 544.802 374.072 544.468 374.875  c
544.135 375.677 543.710 376.260 543.195 376.625  c
542.679 376.989 542.182 377.171 541.703 377.171  c
540.755 377.171 539.968 376.614 539.343 375.500  c
538.812 374.552 538.546 373.416 538.546 372.093  c
h
539.984 372.281 m
539.984 373.645 540.151 374.760 540.484 375.625  c
540.765 376.354 541.182 376.718 541.734 376.718  c
541.994 376.718 542.265 376.599 542.546 376.359  c
542.828 376.119 543.041 375.724 543.187 375.171  c
543.416 374.328 543.531 373.140 543.531 371.609  c
543.531 370.484 543.411 369.541 543.171 368.781  c
543.005 368.218 542.781 367.822 542.500 367.593  c
542.302 367.427 542.057 367.343 541.765 367.343  c
541.442 367.343 541.151 367.494 540.890 367.796  c
540.536 368.203 540.296 368.841 540.171 369.710  c
540.046 370.580 539.984 371.437 539.984 372.281  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
93.8988 351.000 m
93.8988 353.380 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
191.696 351.000 m
191.696 353.380 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
289.494 351.000 m
289.494 353.380 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
387.292 351.000 m
387.292 353.380 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
485.089 351.000 m
485.089 353.380 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
Q
2 J
0 j
q
0 J
1 j
newpath
45.0000 351.000 m
45.0000 9.01998 l
S
Q
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
1 173 15 15 rc
newpath
5.10937 179.187 m
7.84375 179.187 l
7.84375 179.421 l
7.67187 179.421 l
7.50520 179.421 7.37760 179.460 7.28906 179.539  c
7.20052 179.617 7.15625 179.724 7.15625 179.859  c
7.15625 180.015 7.20312 180.192 7.29687 180.390  c
8.64062 183.609 l
10.0000 180.265 l
10.0937 180.036 10.1406 179.859 10.1406 179.734  c
10.1406 179.671 10.1250 179.619 10.0937 179.578  c
10.0520 179.515 9.99479 179.474 9.92187 179.453  c
9.84895 179.432 9.70312 179.421 9.48437 179.421  c
9.48437 179.187 l
11.3750 179.187 l
11.3750 179.421 l
11.1562 179.442 11.0052 179.484 10.9218 179.546  c
10.7760 179.682 10.6406 179.895 10.5156 180.187  c
8.45312 185.171 l
8.20312 185.171 l
6.12500 180.265 l
6.03125 180.036 5.94270 179.872 5.85937 179.773  c
5.77604 179.674 5.66666 179.593 5.53125 179.531  c
5.45833 179.489 5.31770 179.453 5.10937 179.421  c
5.10937 179.187 l
h
f
Q
cliprestore
newpath
0 0 m
0 390.000 l
542.000 390.000 l
542.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 w
1.00000 w
2 J
0 j
newpath
45.0000 351.000 m
40.2400 351.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
35.5468 357.093 m
35.5468 355.958 35.7161 354.981 36.0546 354.164  c
36.3932 353.346 36.8489 352.739 37.4218 352.343  c
37.8593 352.020 38.3125 351.859 38.7812 351.859  c
39.5416 351.859 40.2239 352.250 40.8281 353.031  c
41.5885 353.989 41.9687 355.291 41.9687 356.937  c
41.9687 358.093 41.8020 359.072 41.4687 359.875  c
41.1354 360.677 40.7109 361.260 40.1953 361.625  c
39.6796 361.989 39.1822 362.171 38.7031 362.171  c
37.7552 362.171 36.9687 361.614 36.3437 360.500  c
35.8125 359.552 35.5468 358.416 35.5468 357.093  c
h
36.9843 357.281 m
36.9843 358.645 37.1510 359.760 37.4843 360.625  c
37.7656 361.354 38.1822 361.718 38.7343 361.718  c
38.9947 361.718 39.2656 361.599 39.5468 361.359  c
39.8281 361.119 40.0416 360.724 40.1875 360.171  c
40.4166 359.328 40.5312 358.140 40.5312 356.609  c
40.5312 355.484 40.4114 354.541 40.1718 353.781  c
40.0052 353.218 39.7812 352.822 39.5000 352.593  c
39.3020 352.427 39.0572 352.343 38.7656 352.343  c
38.4427 352.343 38.1510 352.494 37.8906 352.796  c
37.5364 353.203 37.2968 353.841 37.1718 354.710  c
37.0468 355.580 36.9843 356.437 36.9843 357.281  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
45.0000 294.003 m
40.2400 294.003 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
24.5468 300.093 m
24.5468 298.958 24.7161 297.981 25.0546 297.164  c
25.3932 296.346 25.8489 295.739 26.4218 295.343  c
26.8593 295.020 27.3125 294.859 27.7812 294.859  c
28.5416 294.859 29.2239 295.250 29.8281 296.031  c
30.5885 296.989 30.9687 298.291 30.9687 299.937  c
30.9687 301.093 30.8020 302.072 30.4687 302.875  c
30.1354 303.677 29.7109 304.260 29.1953 304.625  c
28.6796 304.989 28.1822 305.171 27.7031 305.171  c
26.7552 305.171 25.9687 304.614 25.3437 303.500  c
24.8125 302.552 24.5468 301.416 24.5468 300.093  c
h
25.9843 300.281 m
25.9843 301.645 26.1510 302.760 26.4843 303.625  c
26.7656 304.354 27.1822 304.718 27.7343 304.718  c
27.9947 304.718 28.2656 304.599 28.5468 304.359  c
28.8281 304.119 29.0416 303.724 29.1875 303.171  c
29.4166 302.328 29.5312 301.140 29.5312 299.609  c
29.5312 298.484 29.4114 297.541 29.1718 296.781  c
29.0052 296.218 28.7812 295.822 28.5000 295.593  c
28.3020 295.427 28.0572 295.343 27.7656 295.343  c
27.4427 295.343 27.1510 295.494 26.8906 295.796  c
26.5364 296.203 26.2968 296.841 26.1718 297.710  c
26.0468 298.580 25.9843 299.437 25.9843 300.281  c
h
32.8750 303.578 m
33.1041 303.578 33.2968 303.658 33.4531 303.820  c
33.6093 303.981 33.6875 304.171 33.6875 304.390  c
33.6875 304.619 33.6093 304.812 33.4531 304.968  c
33.2968 305.125 33.1041 305.203 32.8750 305.203  c
32.6458 305.203 32.4531 305.125 32.2968 304.968  c
32.1406 304.812 32.0625 304.619 32.0625 304.390  c
32.0625 304.161 32.1406 303.968 32.2968 303.812  c
32.4531 303.656 32.6458 303.578 32.8750 303.578  c
h
36.7656 296.046 m
39.1718 294.859 l
39.4218 294.859 l
39.4218 303.250 l
39.4218 303.802 39.4453 304.148 39.4921 304.289  c
39.5390 304.429 39.6354 304.536 39.7812 304.609  c
39.9270 304.682 40.2239 304.724 40.6718 304.734  c
40.6718 305.000 l
36.9375 305.000 l
36.9375 304.734 l
37.4062 304.724 37.7083 304.682 37.8437 304.609  c
37.9791 304.536 38.0729 304.440 38.1250 304.320  c
38.1770 304.200 38.2031 303.843 38.2031 303.250  c
38.2031 297.890 l
38.2031 297.161 38.1822 296.697 38.1406 296.500  c
38.0989 296.343 38.0338 296.229 37.9453 296.156  c
37.8567 296.083 37.7500 296.046 37.6250 296.046  c
37.4375 296.046 37.1875 296.119 36.8750 296.265  c
36.7656 296.046 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
45.0000 237.006 m
40.2400 237.006 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
24.5468 243.093 m
24.5468 241.958 24.7161 240.981 25.0546 240.164  c
25.3932 239.346 25.8489 238.739 26.4218 238.343  c
26.8593 238.020 27.3125 237.859 27.7812 237.859  c
28.5416 237.859 29.2239 238.250 29.8281 239.031  c
30.5885 239.989 30.9687 241.291 30.9687 242.937  c
30.9687 244.093 30.8020 245.072 30.4687 245.875  c
30.1354 246.677 29.7109 247.260 29.1953 247.625  c
28.6796 247.989 28.1822 248.171 27.7031 248.171  c
26.7552 248.171 25.9687 247.614 25.3437 246.500  c
24.8125 245.552 24.5468 244.416 24.5468 243.093  c
h
25.9843 243.281 m
25.9843 244.645 26.1510 245.760 26.4843 246.625  c
26.7656 247.354 27.1822 247.718 27.7343 247.718  c
27.9947 247.718 28.2656 247.599 28.5468 247.359  c
28.8281 247.119 29.0416 246.724 29.1875 246.171  c
29.4166 245.328 29.5312 244.140 29.5312 242.609  c
29.5312 241.484 29.4114 240.541 29.1718 239.781  c
29.0052 239.218 28.7812 238.822 28.5000 238.593  c
28.3020 238.427 28.0572 238.343 27.7656 238.343  c
27.4427 238.343 27.1510 238.494 26.8906 238.796  c
26.5364 239.203 26.2968 239.841 26.1718 240.710  c
26.0468 241.580 25.9843 242.437 25.9843 243.281  c
h
32.8750 246.578 m
33.1041 246.578 33.2968 246.658 33.4531 246.820  c
33.6093 246.981 33.6875 247.171 33.6875 247.390  c
33.6875 247.619 33.6093 247.812 33.4531 247.968  c
33.2968 248.125 33.1041 248.203 32.8750 248.203  c
32.6458 248.203 32.4531 248.125 32.2968 247.968  c
32.1406 247.812 32.0625 247.619 32.0625 247.390  c
32.0625 247.161 32.1406 246.968 32.2968 246.812  c
32.4531 246.656 32.6458 246.578 32.8750 246.578  c
h
41.8750 246.093 m
41.1875 248.000 l
35.3281 248.000 l
35.3281 247.734 l
37.0468 246.161 38.2578 244.875 38.9609 243.875  c
39.6640 242.875 40.0156 241.963 40.0156 241.140  c
40.0156 240.515 39.8229 240.000 39.4375 239.593  c
39.0520 239.187 38.5885 238.984 38.0468 238.984  c
37.5677 238.984 37.1328 239.127 36.7421 239.414  c
36.3515 239.700 36.0625 240.119 35.8750 240.671  c
35.6093 240.671 l
35.7343 239.765 36.0494 239.070 36.5546 238.585  c
37.0599 238.101 37.6875 237.859 38.4375 237.859  c
39.2500 237.859 39.9244 238.119 40.4609 238.640  c
40.9974 239.161 41.2656 239.770 41.2656 240.468  c
41.2656 240.968 41.1510 241.474 40.9218 241.984  c
40.5572 242.776 39.9687 243.609 39.1562 244.484  c
37.9479 245.817 37.1875 246.619 36.8750 246.890  c
39.4687 246.890 l
40.0000 246.890 40.3724 246.872 40.5859 246.835  c
40.7994 246.799 40.9921 246.721 41.1640 246.601  c
41.3359 246.481 41.4843 246.312 41.6093 246.093  c
41.8750 246.093 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
45.0000 180.010 m
40.2400 180.010 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
24.5468 186.093 m
24.5468 184.958 24.7161 183.981 25.0546 183.164  c
25.3932 182.346 25.8489 181.739 26.4218 181.343  c
26.8593 181.020 27.3125 180.859 27.7812 180.859  c
28.5416 180.859 29.2239 181.250 29.8281 182.031  c
30.5885 182.989 30.9687 184.291 30.9687 185.937  c
30.9687 187.093 30.8020 188.072 30.4687 188.875  c
30.1354 189.677 29.7109 190.260 29.1953 190.625  c
28.6796 190.989 28.1822 191.171 27.7031 191.171  c
26.7552 191.171 25.9687 190.614 25.3437 189.500  c
24.8125 188.552 24.5468 187.416 24.5468 186.093  c
h
25.9843 186.281 m
25.9843 187.645 26.1510 188.760 26.4843 189.625  c
26.7656 190.354 27.1822 190.718 27.7343 190.718  c
27.9947 190.718 28.2656 190.599 28.5468 190.359  c
28.8281 190.119 29.0416 189.724 29.1875 189.171  c
29.4166 188.328 29.5312 187.140 29.5312 185.609  c
29.5312 184.484 29.4114 183.541 29.1718 182.781  c
29.0052 182.218 28.7812 181.822 28.5000 181.593  c
28.3020 181.427 28.0572 181.343 27.7656 181.343  c
27.4427 181.343 27.1510 181.494 26.8906 181.796  c
26.5364 182.203 26.2968 182.841 26.1718 183.710  c
26.0468 184.580 25.9843 185.437 25.9843 186.281  c
h
32.8750 189.578 m
33.1041 189.578 33.2968 189.658 33.4531 189.820  c
33.6093 189.981 33.6875 190.171 33.6875 190.390  c
33.6875 190.619 33.6093 190.812 33.4531 190.968  c
33.2968 191.125 33.1041 191.203 32.8750 191.203  c
32.6458 191.203 32.4531 191.125 32.2968 190.968  c
32.1406 190.812 32.0625 190.619 32.0625 190.390  c
32.0625 190.161 32.1406 189.968 32.2968 189.812  c
32.4531 189.656 32.6458 189.578 32.8750 189.578  c
h
35.7656 182.953 m
36.0468 182.286 36.4036 181.770 36.8359 181.406  c
37.2682 181.041 37.8072 180.859 38.4531 180.859  c
39.2447 180.859 39.8541 181.119 40.2812 181.640  c
40.6041 182.026 40.7656 182.437 40.7656 182.875  c
40.7656 183.604 40.3125 184.354 39.4062 185.125  c
40.0104 185.364 40.4687 185.705 40.7812 186.148  c
41.0937 186.591 41.2500 187.114 41.2500 187.718  c
41.2500 188.572 40.9791 189.312 40.4375 189.937  c
39.7187 190.760 38.6875 191.171 37.3437 191.171  c
36.6666 191.171 36.2083 191.088 35.9687 190.921  c
35.7291 190.755 35.6093 190.578 35.6093 190.390  c
35.6093 190.244 35.6666 190.119 35.7812 190.015  c
35.8958 189.911 36.0312 189.859 36.1875 189.859  c
36.3125 189.859 36.4375 189.880 36.5625 189.921  c
36.6458 189.942 36.8359 190.028 37.1328 190.179  c
37.4296 190.330 37.6302 190.421 37.7343 190.453  c
37.9218 190.505 38.1145 190.531 38.3125 190.531  c
38.8125 190.531 39.2474 190.338 39.6171 189.953  c
39.9869 189.567 40.1718 189.114 40.1718 188.593  c
40.1718 188.208 40.0885 187.833 39.9218 187.468  c
39.7864 187.187 39.6458 186.979 39.5000 186.843  c
39.2916 186.645 39.0026 186.468 38.6328 186.312  c
38.2630 186.156 37.8906 186.078 37.5156 186.078  c
37.2812 186.078 l
37.2812 185.843 l
37.6666 185.802 38.0520 185.666 38.4375 185.437  c
38.8229 185.208 39.1041 184.932 39.2812 184.609  c
39.4583 184.286 39.5468 183.932 39.5468 183.546  c
39.5468 183.046 39.3906 182.640 39.0781 182.328  c
38.7656 182.015 38.3750 181.859 37.9062 181.859  c
37.1458 181.859 36.5104 182.265 36.0000 183.078  c
35.7656 182.953 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
45.0000 123.013 m
40.2400 123.013 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
24.5468 129.093 m
24.5468 127.958 24.7161 126.981 25.0546 126.164  c
25.3932 125.346 25.8489 124.739 26.4218 124.343  c
26.8593 124.020 27.3125 123.859 27.7812 123.859  c
28.5416 123.859 29.2239 124.250 29.8281 125.031  c
30.5885 125.989 30.9687 127.291 30.9687 128.937  c
30.9687 130.093 30.8020 131.072 30.4687 131.875  c
30.1354 132.677 29.7109 133.260 29.1953 133.625  c
28.6796 133.989 28.1822 134.171 27.7031 134.171  c
26.7552 134.171 25.9687 133.614 25.3437 132.500  c
24.8125 131.552 24.5468 130.416 24.5468 129.093  c
h
25.9843 129.281 m
25.9843 130.645 26.1510 131.760 26.4843 132.625  c
26.7656 133.354 27.1822 133.718 27.7343 133.718  c
27.9947 133.718 28.2656 133.599 28.5468 133.359  c
28.8281 133.119 29.0416 132.724 29.1875 132.171  c
29.4166 131.328 29.5312 130.140 29.5312 128.609  c
29.5312 127.484 29.4114 126.541 29.1718 125.781  c
29.0052 125.218 28.7812 124.822 28.5000 124.593  c
28.3020 124.427 28.0572 124.343 27.7656 124.343  c
27.4427 124.343 27.1510 124.494 26.8906 124.796  c
26.5364 125.203 26.2968 125.841 26.1718 126.710  c
26.0468 127.580 25.9843 128.437 25.9843 129.281  c
h
32.8750 132.578 m
33.1041 132.578 33.2968 132.658 33.4531 132.820  c
33.6093 132.981 33.6875 133.171 33.6875 133.390  c
33.6875 133.619 33.6093 133.812 33.4531 133.968  c
33.2968 134.125 33.1041 134.203 32.8750 134.203  c
32.6458 134.203 32.4531 134.125 32.2968 133.968  c
32.1406 133.812 32.0625 133.619 32.0625 133.390  c
32.0625 133.161 32.1406 132.968 32.2968 132.812  c
32.4531 132.656 32.6458 132.578 32.8750 132.578  c
h
41.9843 130.343 m
41.9843 131.375 l
40.6406 131.375 l
40.6406 134.000 l
39.4375 134.000 l
39.4375 131.375 l
35.2343 131.375 l
35.2343 130.437 l
39.8437 123.859 l
40.6406 123.859 l
40.6406 130.343 l
41.9843 130.343 l
h
39.4375 130.343 m
39.4375 125.406 l
35.9531 130.343 l
39.4375 130.343 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
45.0000 66.0166 m
40.2400 66.0166 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
24.5468 72.0937 m
24.5468 70.9583 24.7161 69.9817 25.0546 69.1640  c
25.3932 68.3463 25.8489 67.7395 26.4218 67.3437  c
26.8593 67.0208 27.3125 66.8593 27.7812 66.8593  c
28.5416 66.8593 29.2239 67.2500 29.8281 68.0312  c
30.5885 68.9895 30.9687 70.2916 30.9687 71.9375  c
30.9687 73.0937 30.8020 74.0729 30.4687 74.8750  c
30.1354 75.6770 29.7109 76.2604 29.1953 76.6250  c
28.6796 76.9895 28.1822 77.1718 27.7031 77.1718  c
26.7552 77.1718 25.9687 76.6145 25.3437 75.5000  c
24.8125 74.5520 24.5468 73.4166 24.5468 72.0937  c
h
25.9843 72.2812 m
25.9843 73.6458 26.1510 74.7604 26.4843 75.6250  c
26.7656 76.3541 27.1822 76.7187 27.7343 76.7187  c
27.9947 76.7187 28.2656 76.5989 28.5468 76.3593  c
28.8281 76.1197 29.0416 75.7239 29.1875 75.1718  c
29.4166 74.3281 29.5312 73.1406 29.5312 71.6093  c
29.5312 70.4843 29.4114 69.5416 29.1718 68.7812  c
29.0052 68.2187 28.7812 67.8229 28.5000 67.5937  c
28.3020 67.4270 28.0572 67.3437 27.7656 67.3437  c
27.4427 67.3437 27.1510 67.4947 26.8906 67.7968  c
26.5364 68.2031 26.2968 68.8411 26.1718 69.7109  c
26.0468 70.5807 25.9843 71.4375 25.9843 72.2812  c
h
32.8750 75.5781 m
33.1041 75.5781 33.2968 75.6588 33.4531 75.8203  c
33.6093 75.9817 33.6875 76.1718 33.6875 76.3906  c
33.6875 76.6197 33.6093 76.8125 33.4531 76.9687  c
33.2968 77.1250 33.1041 77.2031 32.8750 77.2031  c
32.6458 77.2031 32.4531 77.1250 32.2968 76.9687  c
32.1406 76.8125 32.0625 76.6197 32.0625 76.3906  c
32.0625 76.1614 32.1406 75.9687 32.2968 75.8125  c
32.4531 75.6562 32.6458 75.5781 32.8750 75.5781  c
h
41.5156 67.0625 m
40.9375 68.3125 l
37.9531 68.3125 l
37.2968 69.6406 l
38.5885 69.8385 39.6145 70.3229 40.3750 71.0937  c
41.0208 71.7500 41.3437 72.5312 41.3437 73.4375  c
41.3437 73.9583 41.2395 74.4401 41.0312 74.8828  c
40.8229 75.3255 40.5572 75.7031 40.2343 76.0156  c
39.9114 76.3281 39.5520 76.5781 39.1562 76.7656  c
38.5937 77.0364 38.0156 77.1718 37.4218 77.1718  c
36.8281 77.1718 36.3958 77.0703 36.1250 76.8671  c
35.8541 76.6640 35.7187 76.4427 35.7187 76.2031  c
35.7187 76.0677 35.7760 75.9479 35.8906 75.8437  c
36.0052 75.7395 36.1458 75.6875 36.3125 75.6875  c
36.4375 75.6875 36.5468 75.7057 36.6406 75.7421  c
36.7343 75.7786 36.8958 75.8802 37.1250 76.0468  c
37.5000 76.2968 37.8750 76.4218 38.2500 76.4218  c
38.8229 76.4218 39.3229 76.2057 39.7500 75.7734  c
40.1770 75.3411 40.3906 74.8125 40.3906 74.1875  c
40.3906 73.5937 40.1979 73.0364 39.8125 72.5156  c
39.4270 71.9947 38.8958 71.5937 38.2187 71.3125  c
37.6875 71.0937 36.9635 70.9635 36.0468 70.9218  c
37.9531 67.0625 l
41.5156 67.0625 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
45.0000 9.01998 m
40.2400 9.01998 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
24.5468 15.0937 m
24.5468 13.9583 24.7161 12.9817 25.0546 12.1640  c
25.3932 11.3463 25.8489 10.7395 26.4218 10.3437  c
26.8593 10.0208 27.3125 9.85937 27.7812 9.85937  c
28.5416 9.85937 29.2239 10.2500 29.8281 11.0312  c
30.5885 11.9895 30.9687 13.2916 30.9687 14.9375  c
30.9687 16.0937 30.8020 17.0729 30.4687 17.8750  c
30.1354 18.6770 29.7109 19.2604 29.1953 19.6250  c
28.6796 19.9895 28.1822 20.1718 27.7031 20.1718  c
26.7552 20.1718 25.9687 19.6145 25.3437 18.5000  c
24.8125 17.5520 24.5468 16.4166 24.5468 15.0937  c
h
25.9843 15.2812 m
25.9843 16.6458 26.1510 17.7604 26.4843 18.6250  c
26.7656 19.3541 27.1822 19.7187 27.7343 19.7187  c
27.9947 19.7187 28.2656 19.5989 28.5468 19.3593  c
28.8281 19.1197 29.0416 18.7239 29.1875 18.1718  c
29.4166 17.3281 29.5312 16.1406 29.5312 14.6093  c
29.5312 13.4843 29.4114 12.5416 29.1718 11.7812  c
29.0052 11.2187 28.7812 10.8229 28.5000 10.5937  c
28.3020 10.4270 28.0572 10.3437 27.7656 10.3437  c
27.4427 10.3437 27.1510 10.4947 26.8906 10.7968  c
26.5364 11.2031 26.2968 11.8411 26.1718 12.7109  c
26.0468 13.5807 25.9843 14.4375 25.9843 15.2812  c
h
32.8750 18.5781 m
33.1041 18.5781 33.2968 18.6588 33.4531 18.8203  c
33.6093 18.9817 33.6875 19.1718 33.6875 19.3906  c
33.6875 19.6197 33.6093 19.8125 33.4531 19.9687  c
33.2968 20.1250 33.1041 20.2031 32.8750 20.2031  c
32.6458 20.2031 32.4531 20.1250 32.2968 19.9687  c
32.1406 19.8125 32.0625 19.6197 32.0625 19.3906  c
32.0625 19.1614 32.1406 18.9687 32.2968 18.8125  c
32.4531 18.6562 32.6458 18.5781 32.8750 18.5781  c
h
41.7187 9.85937 m
41.7187 10.1406 l
41.0729 10.2031 40.5468 10.3307 40.1406 10.5234  c
39.7343 10.7161 39.3333 11.0104 38.9375 11.4062  c
38.5416 11.8020 38.2135 12.2421 37.9531 12.7265  c
37.6927 13.2109 37.4739 13.7864 37.2968 14.4531  c
37.9947 13.9739 38.6979 13.7343 39.4062 13.7343  c
40.0833 13.7343 40.6718 14.0078 41.1718 14.5546  c
41.6718 15.1015 41.9218 15.8020 41.9218 16.6562  c
41.9218 17.4895 41.6718 18.2500 41.1718 18.9375  c
40.5677 19.7604 39.7656 20.1718 38.7656 20.1718  c
38.0885 20.1718 37.5104 19.9479 37.0312 19.5000  c
36.1041 18.6250 35.6406 17.4947 35.6406 16.1093  c
35.6406 15.2135 35.8203 14.3671 36.1796 13.5703  c
36.5390 12.7734 37.0494 12.0625 37.7109 11.4375  c
38.3724 10.8125 39.0052 10.3932 39.6093 10.1796  c
40.2135 9.96614 40.7760 9.85937 41.2968 9.85937  c
41.7187 9.85937 l
h
37.1718 14.9843 m
37.0781 15.6510 37.0312 16.1875 37.0312 16.5937  c
37.0312 17.0625 37.1197 17.5703 37.2968 18.1171  c
37.4739 18.6640 37.7291 19.0989 38.0625 19.4218  c
38.3125 19.6510 38.6197 19.7656 38.9843 19.7656  c
39.4010 19.7656 39.7786 19.5651 40.1171 19.1640  c
40.4557 18.7630 40.6250 18.1927 40.6250 17.4531  c
40.6250 16.6197 40.4583 15.8984 40.1250 15.2890  c
39.7916 14.6796 39.3177 14.3750 38.7031 14.3750  c
38.5156 14.3750 38.3177 14.4140 38.1093 14.4921  c
37.9010 14.5703 37.5885 14.7343 37.1718 14.9843  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
45.0000 322.501 m
42.6200 322.501 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
45.0000 265.505 m
42.6200 265.505 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
45.0000 208.508 m
42.6200 208.508 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
45.0000 151.511 m
42.6200 151.511 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
45.0000 94.5149 m
42.6200 94.5149 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
45.0000 37.5183 m
42.6200 37.5183 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
Q
2 J
0 j
Q
Q
cliprestore
0 0 400 400 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
1.00000 w
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
